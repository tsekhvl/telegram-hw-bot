import os
import logging
import asyncio
import csv

from datetime import datetime, timezone

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters


import openai

print("=== ENV DEBUG ===")
for k in ("BOT_TOKEN", "OPENAI_API_KEY"):
    print(k, repr(os.environ.get(k)))
print("=================")

# ------------------------------------------------------------
# üóÇÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ------------------------------------------------------------

BOT_TOKEN = os.environ.get("BOT_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
LOG_FILE_PATH = os.getenv("LOG_FILE_PATH", "ir_homework_log.csv")

openai.api_key = OPENAI_API_KEY

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

assert BOT_TOKEN, "BOT_TOKEN –ø—É—Å—Ç–æ–π"
assert OPENAI_API_KEY, "OPENAI_API_KEY –ø—É—Å—Ç–æ–π"
logger.info("–¢–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –¥–ª–∏–Ω—ã: %d / %d", len(BOT_TOKEN), len(OPENAI_API_KEY))

# ------------------------------------------------------------
# üíæ  –†–∞–±–æ—Ç–∞ —Å CSV‚Äë—Ñ–∞–π–ª–æ–º
# ------------------------------------------------------------

def ensure_log_file(path: str) -> None:
    if not os.path.exists(path):
        with open(path, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(
                [
                    "timestamp_utc",
                    "telegram_id",
                    "username",
                    "fio",
                    "group",
                    "task_type",
                    "seminar_no",
                    "task_text",
                    "feedback",
                ]
            )
        logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–æ–≥‚Äë—Ñ–∞–π–ª %s", path)


def append_row_to_file(path: str, row: list[str]) -> None:
    with open(path, "a", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow(row)

# ------------------------------------------------------------
# ü§ñ  –•—ç–Ω–¥–ª–µ—Ä—ã Telegram
# ------------------------------------------------------------

async def start(update: Update, context) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–§–ò–û; –≥—Ä—É–ø–ø–∞ (–†–ì1/–†–ì21/–†–ì22); —Ç–∏–ø (–æ—Ç—Ä–∞–±–æ—Ç–∫–∞/–¥–æ–ø); ‚Ññ‚ÄØ—Å–µ–º–∏–Ω–∞—Ä–∞; —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è"
    )




async def handle_text(update: Update, context) -> None:
    user = update.effective_user
    raw_text = update.message.text.strip()

    parts = [p.strip() for p in raw_text.strip().split(";")]
    
    if len(parts) != 5:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–π:\n"
            "–§–ò–û; –≥—Ä—É–ø–ø–∞; —Ç–∏–ø (–æ—Ç—Ä–∞–±–æ—Ç–∫–∞/–¥–æ–ø); ‚Ññ —Å–µ–º–∏–Ω–∞—Ä–∞; —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è"
        )
        return
    
    fio, group, task_type, seminar_no, task_text = parts


    feedback = await get_feedback(task_text)
    await update.message.reply_text(feedback)

    ensure_log_file(LOG_FILE_PATH)
    append_row_to_file(
        LOG_FILE_PATH,
        [
            datetime.now(timezone.utc).isoformat(),
            user.id,
            user.username or "‚Äî",
            fio,
            group,
            task_type,
            seminar_no,
            task_text,
            feedback,
        ],
    )

# ------------------------------------------------------------
# üîÆ  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–¥–±—ç–∫–∞
# ------------------------------------------------------------

import functools

async def get_feedback(task: str) -> str:
    system_prompt = (
        "–¢—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–∏ –ë–ª–∏–∂–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞.\n"
        "–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±—ç–∫ (3‚Äì5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –Ω–∞ –ø—Ä–∏—Å–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É."
    )

    response = await openai.ChatCompletion.acreate(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": task},
        ],
        max_tokens=300,
        temperature=0.4,
    )
    return response.choices[0].message.content.strip()

# ------------------------------------------------------------
# –°–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# ------------------------------------------------------------

from io import StringIO
from telegram.constants import ChatAction

# üîê –ü–æ–¥—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π Telegram ID (—á–∏—Å–ª–æ, –Ω–µ —Å—Ç—Ä–æ–∫–∞)
YOUR_TELEGRAM_ID = 415738479

async def collect_today(update: Update, context) -> None:
    if update.effective_user.id != YOUR_TELEGRAM_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.")
        return

    await update.message.chat.send_action(action=ChatAction.TYPING)

    today = datetime.now(timezone.utc).date()
    collected = []

    try:
        with open(LOG_FILE_PATH, "r", encoding="utf-8") as f:
            reader = csv.reader(f)
            headers = next(reader)
            for row in reader:
                timestamp_str = row[0]
                timestamp = datetime.fromisoformat(timestamp_str)
                if timestamp.date() == today:
                    collected.append(row)

        if not collected:
            await update.message.reply_text("–°–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        output = StringIO()
        writer = csv.writer(output)
        writer.writerow(headers)
        writer.writerows(collected)
        output.seek(0)

        await update.message.reply_document(document=output, filename=f"–æ—Ç–≤–µ—Ç—ã_{today}.csv")

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ: {e}")


# ------------------------------------------------------------
# üèÉ‚Äç‚ôÇÔ∏è  –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ------------------------------------------------------------

def main() -> None:
    if not (BOT_TOKEN and OPENAI_API_KEY):
        raise RuntimeError("BOT_TOKEN –∏ OPENAI_API_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã!")

    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CommandHandler("—Å–æ–±—Ä–∞—Ç—å", collect_today))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è‚Ä¶")
    application.run_polling()          # ‚Üê —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤

if __name__ == "__main__":
    try:
        main()                         # –±–µ–∑ asyncio.run
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
